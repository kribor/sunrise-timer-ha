"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dayjsRangeInclISODate = exports.dayjsRangeIncl = exports.dayjsRangeISODate = exports.dayjsRange = void 0;
const index_1 = require("./index");
/**
 * Like _range, but for IDayjs.
 * Left side is inclusive.
 * Right side of the range is exclusive. (same as _range)
 */
function dayjsRange(minIncl, maxExcl, step = 1, stepUnit = 'd') {
    const days = [];
    let current = (0, index_1.dayjs)(minIncl).startOf(stepUnit);
    const max = (0, index_1.dayjs)(maxExcl).startOf(stepUnit);
    do {
        days.push(current);
        current = current.add(step, stepUnit);
    } while (current.isBefore(max));
    return days;
}
exports.dayjsRange = dayjsRange;
function dayjsRangeISODate(minIncl, maxExcl, step = 1, stepUnit = 'd') {
    return dayjsRange(minIncl, maxExcl, step, stepUnit).map(d => d.toISODate());
}
exports.dayjsRangeISODate = dayjsRangeISODate;
/**
 * Like _range, but for IDayjs.
 * Both sides inclusive.
 */
function dayjsRangeIncl(minIncl, maxIncl, step = 1, stepUnit = 'd') {
    return dayjsRange(minIncl, (0, index_1.dayjs)(maxIncl).add(1, stepUnit), step, stepUnit);
}
exports.dayjsRangeIncl = dayjsRangeIncl;
function dayjsRangeInclISODate(minIncl, maxIncl, step = 1, stepUnit = 'd') {
    return dayjsRangeIncl(minIncl, maxIncl, step, stepUnit).map(d => d.toISODate());
}
exports.dayjsRangeInclISODate = dayjsRangeInclISODate;
