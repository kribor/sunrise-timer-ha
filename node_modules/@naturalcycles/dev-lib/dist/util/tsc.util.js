"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureProjectTsconfigScripts = exports.tsc = void 0;
const fs = require("fs");
const js_lib_1 = require("@naturalcycles/js-lib");
const colors_1 = require("@naturalcycles/nodejs-lib/dist/colors");
const exec_1 = require("@naturalcycles/nodejs-lib/dist/exec");
const fs_1 = require("@naturalcycles/nodejs-lib/dist/fs");
const paths_cnst_1 = require("../cnst/paths.cnst");
async function tsc() {
    const started = Date.now();
    await (0, exec_1.execCommand)('tsc');
    console.log(`${(0, colors_1.boldGrey)('tsc')} ${(0, colors_1.dimGrey)(`took ` + (0, js_lib_1._since)(started))}`);
}
exports.tsc = tsc;
/**
 * Returns path to /scripts/tsconfig.json
 */
function ensureProjectTsconfigScripts() {
    const projectTsconfigPath = `./scripts/tsconfig.json`;
    if (!fs.existsSync(projectTsconfigPath)) {
        // You cannot just use a shared `tsconfig.scripts.json` because of relative paths for `include`
        // So, it will be copied into the project
        (0, fs_1.kpySync)({
            baseDir: `${paths_cnst_1.cfgDir}/init/scripts/`,
            inputPatterns: ['tsconfig.json'],
            outputDir: './scripts',
        });
        console.log(`${(0, colors_1.boldGrey)('/scripts/tsconfig.json')} file is automatically added`);
    }
    return projectTsconfigPath;
}
exports.ensureProjectTsconfigScripts = ensureProjectTsconfigScripts;
