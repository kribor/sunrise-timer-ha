"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runESLint = exports.getTSConfigPathScripts = exports.getTSConfigPath = void 0;
const fs = require("fs");
const exec_1 = require("@naturalcycles/nodejs-lib/dist/exec");
const paths_cnst_1 = require("../cnst/paths.cnst");
function getTSConfigPath() {
    // this is to support "Solution style tsconfig.json" (as used in Angular10, for example)
    // return [`./tsconfig.base.json`].find(p => fs.existsSync(p)) || `./tsconfig.json`
    return './tsconfig.json';
}
exports.getTSConfigPath = getTSConfigPath;
function getTSConfigPathScripts() {
    return [`./scripts/tsconfig.json`].find(p => fs.existsSync(p)) || `${paths_cnst_1.scriptsDir}/tsconfig.json`;
}
exports.getTSConfigPathScripts = getTSConfigPathScripts;
async function runESLint(dir, eslintConfigPath, tsconfigPath, extensions = ['ts', 'tsx', 'vue'], fix = true) {
    if (!fs.existsSync(dir))
        return; // faster to bail-out like this
    const args = [
        `--config`,
        eslintConfigPath,
        `${dir}/**/*.{${extensions.join(',')}}`,
        ...(tsconfigPath ? [`--parser-options=project:${tsconfigPath}`] : []),
        `--no-error-on-unmatched-pattern`,
        fix ? `--fix` : '',
    ].filter(Boolean);
    await (0, exec_1.execWithArgs)('eslint', args);
}
exports.runESLint = runESLint;
