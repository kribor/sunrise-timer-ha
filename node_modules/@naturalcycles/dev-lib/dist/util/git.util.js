"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitCurrentRepoName = exports.gitCurrentBranchName = exports.gitCurrentCommitTimestamp = exports.gitCurrentCommitSha = exports.gitPush = exports.gitPull = exports.gitIsAhead = exports.gitCommitAll = exports.gitHasUncommittedChanges = exports.commitMessageToTitleMessage = exports.getLastGitCommitMsg = void 0;
const path = require("path");
const exec_util_1 = require("@naturalcycles/nodejs-lib/dist/exec/exec.util");
const execa = require("execa");
async function getLastGitCommitMsg() {
    // git log -1 --pretty=%B
    const cmd = 'git';
    const args = ['log', '-1', '--pretty=%B'];
    const { stdout: msg } = await execa(cmd, args);
    return msg;
}
exports.getLastGitCommitMsg = getLastGitCommitMsg;
function commitMessageToTitleMessage(msg) {
    const firstLine = msg.split('\n')[0];
    const [preTitle, title] = firstLine.split(': ');
    return title || preTitle;
}
exports.commitMessageToTitleMessage = commitMessageToTitleMessage;
async function gitHasUncommittedChanges() {
    // git diff-index --quiet HEAD -- || echo "untracked"
    const cmd = 'git diff-index --quiet HEAD --';
    const { exitCode } = await execa(cmd, {
        shell: true,
        reject: false,
    });
    // console.log(code)
    return !!exitCode;
}
exports.gitHasUncommittedChanges = gitHasUncommittedChanges;
/**
 * @returns true if there were changes
 */
async function gitCommitAll(msg) {
    // git commit -a -m "style(lint-all): $GIT_MSG" || true
    // const cmd = `git commit -a --no-verify -m "${msg}"`
    const cmd = `git`;
    const args = ['commit', '-a', '--no-verify', '-m', msg];
    (0, exec_util_1.logExec)(cmd, args);
    const { exitCode } = await execa(cmd, args, {
        // shell: true,
        stdio: 'inherit',
        reject: false,
    });
    // console.log(`gitCommitAll code: ${code}`)
    return !exitCode;
}
exports.gitCommitAll = gitCommitAll;
/**
 * @returns true if there are not pushed commits.
 */
async function gitIsAhead() {
    // ahead=`git rev-list HEAD --not --remotes | wc -l | awk '{print $1}'`
    const cmd = `git rev-list HEAD --not --remotes | wc -l | awk '{print $1}'`;
    const { stdout } = await execa(cmd, { shell: true });
    // console.log(`gitIsAhead: ${stdout}`)
    return Number(stdout) > 0;
}
exports.gitIsAhead = gitIsAhead;
async function gitPull() {
    const cmd = 'git';
    const args = ['pull'];
    await execa(cmd, args, {
        reject: false,
        stdio: 'inherit',
    });
}
exports.gitPull = gitPull;
async function gitPush() {
    // git push --set-upstream origin $CIRCLE_BRANCH && echo "pushed, exiting" && exit 0
    const cmd = 'git';
    const args = ['push'];
    const { CIRCLE_BRANCH } = process.env;
    const branchName = CIRCLE_BRANCH || (await gitCurrentBranchName());
    if (branchName) {
        args.push('--set-upstream', 'origin', branchName);
    }
    (0, exec_util_1.logExec)(cmd, args);
    await execa(cmd, args, {
        stdio: 'inherit',
    });
}
exports.gitPush = gitPush;
async function gitCurrentCommitSha(full = false) {
    // git rev-parse HEAD
    const cmd = 'git';
    const args = ['rev-parse', 'HEAD'];
    const { stdout: commitSha } = await execa(cmd, args);
    return full ? commitSha.trim() : commitSha.trim().slice(0, 7);
}
exports.gitCurrentCommitSha = gitCurrentCommitSha;
async function gitCurrentCommitTimestamp() {
    // git log -1 --format=%ct
    const cmd = 'git';
    const args = ['log', '-1', '--format=%ct'];
    const { stdout: ts } = await execa(cmd, args);
    return Number(ts);
}
exports.gitCurrentCommitTimestamp = gitCurrentCommitTimestamp;
async function gitCurrentBranchName() {
    // git rev-parse --abbrev-ref HEAD
    const cmd = 'git';
    const args = ['rev-parse', '--abbrev-ref', 'HEAD'];
    const { stdout: branchName } = await execa(cmd, args);
    // console.log(`gitCurrentBranchName: ${branchName}`)
    return branchName.trim();
}
exports.gitCurrentBranchName = gitCurrentBranchName;
async function gitCurrentRepoName() {
    // basename -s .git `git config --get remote.origin.url`
    const cmd = 'git';
    const args = ['config', '--get', 'remote.origin.url'];
    const { stdout: originUrl } = await execa(cmd, args);
    const repoName = path.basename(originUrl, '.git');
    // console.log(`gitCurrentRepoName: ${repoName}`)
    return repoName;
}
exports.gitCurrentRepoName = gitCurrentRepoName;
