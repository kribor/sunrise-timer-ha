import { _deepEquals, _stringifyAny } from '..';
import { AppError } from './app.error';
/**
 * Evaluates the `condition` (casts it to Boolean).
 * Expects it to be truthy, otherwise throws AppError.
 *
 * Should be used NOT for "expected" / user-facing errors, but
 * vice-versa - for completely unexpected and 100% buggy "should never happen" cases.
 *
 * It'll result in http 500 on the server (cause that's the right code for "unexpected" errors).
 * Pass { httpStatusCode: x } at errorData argument to override the http code (will be picked up by backend-lib).
 *
 * API is similar to Node's assert(), except:
 * 1. Throws js-lib's AppError
 * 2. Has a default message, if not provided
 * 3. Sets `userFriendly` flag to true, cause it's always better to have at least SOME clue, rather than fully generic "Oops" error.
 */
export function _assert(condition, // will be evaluated as Boolean
message, errorData) {
    if (!condition) {
        throw new AssertionError(message || 'see stacktrace', Object.assign({ userFriendly: true }, errorData));
    }
}
/**
 * Like _assert(), but prints more helpful error message.
 * API is similar to Node's assert.equals().
 *
 * Does SHALLOW, but strict equality (===), use _assertDeepEquals() for deep equality.
 */
export function _assertEquals(actual, expected, message, errorData) {
    if (actual !== expected) {
        const msg = [
            message || 'not equal',
            `expected: ${_stringifyAny(expected)}`,
            `got     : ${_stringifyAny(actual)}`,
        ]
            .filter(Boolean)
            .join('\n');
        throw new AssertionError(msg, Object.assign({ userFriendly: true }, errorData));
    }
}
/**
 * Like _assert(), but prints more helpful error message.
 * API is similar to Node's assert.deepEquals().
 *
 * Does DEEP equality via _deepEquals()
 */
export function _assertDeepEquals(actual, expected, message, errorData) {
    if (!_deepEquals(actual, expected)) {
        const msg = [
            message || `not deeply equal`,
            `expected: ${_stringifyAny(expected)}`,
            `got     : ${_stringifyAny(actual)}`,
        ]
            .filter(Boolean)
            .join('\n');
        throw new AssertionError(msg, Object.assign({ userFriendly: true }, errorData));
    }
}
export function _assertIsError(err, message) {
    if (!(err instanceof Error)) {
        const msg = [message || `expected to be instanceof Error`, `actual typeof: ${typeof err}`].join('\n');
        throw new AssertionError(msg, {
            userFriendly: true,
        });
    }
}
export function _assertIsString(v, message) {
    _assertTypeOf(v, 'string', message);
}
export function _assertIsNumber(v, message) {
    _assertTypeOf(v, 'number', message);
}
export function _assertTypeOf(v, expectedType, message) {
    if (typeof v !== expectedType) {
        const msg = [
            message || `unexpected type`,
            `expected: ${expectedType}`,
            `got     : ${typeof v}`,
        ].join('\n');
        throw new AssertionError(msg, {
            userFriendly: true,
        });
    }
}
export class AssertionError extends AppError {
    constructor(message, data = {}) {
        super(message, data);
    }
}
