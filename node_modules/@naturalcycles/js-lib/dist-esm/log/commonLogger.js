import { _noop } from '../index';
export const commonLogLevelNumber = {
    log: 10,
    warn: 20,
    error: 30,
};
/**
 * SimpleLogger that does nothing (noop).
 *
 * @experimental
 */
export const commonLoggerNoop = {
    log: _noop,
    warn: _noop,
    error: _noop,
};
/**
 * Creates a "child" logger that is "limited" to the specified CommonLogLevel.
 */
export function commonLoggerMinLevel(logger, minLevel, mutate = false) {
    const level = commonLogLevelNumber[minLevel];
    if (mutate) {
        if (level > commonLogLevelNumber['log']) {
            logger.log = _noop;
            if (level > commonLogLevelNumber['warn']) {
                logger.warn = _noop;
                if (level > commonLogLevelNumber['error']) {
                    logger.error = _noop;
                }
            }
        }
        return logger;
    }
    if (level <= commonLogLevelNumber['log']) {
        // All levels are kept
        return logger;
    }
    if (level > commonLogLevelNumber['error']) {
        // "Log nothing" logger
        return commonLoggerNoop;
    }
    return {
        log: _noop,
        warn: level <= commonLogLevelNumber['warn'] ? logger.warn.bind(logger) : _noop,
        error: logger.error.bind(logger), // otherwise it's "log nothing" logger (same as noopLogger)
    };
}
/**
 * Creates a "proxy" CommonLogger that pipes log messages to all provided sub-loggers.
 */
export function commonLoggerPipe(loggers) {
    return {
        log: (...args) => loggers.forEach(logger => logger.log(...args)),
        warn: (...args) => loggers.forEach(logger => logger.warn(...args)),
        error: (...args) => loggers.forEach(logger => logger.error(...args)),
    };
}
/**
 * Creates a "child" CommonLogger with prefix (one or multiple).
 */
export function commonLoggerPrefix(logger, ...prefixes) {
    return {
        log: (...args) => logger.log(...prefixes, ...args),
        warn: (...args) => logger.warn(...prefixes, ...args),
        error: (...args) => logger.error(...prefixes, ...args),
    };
}
