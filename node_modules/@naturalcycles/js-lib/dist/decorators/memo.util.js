"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapMemoCache = exports.jsonMemoSerializer = void 0;
const object_util_1 = require("../object/object.util");
const jsonMemoSerializer = args => {
    if (!args.length)
        return undefined;
    if (args.length === 1 && (0, object_util_1._isPrimitive)(args[0]))
        return args[0];
    return JSON.stringify(args);
};
exports.jsonMemoSerializer = jsonMemoSerializer;
// SingleValueMemoCache and ObjectMemoCache are example-only, not used in production code
/*
export class SingleValueMemoCache implements MemoCache {
  private v: any = undefined
  private valueSet = false

  has() {
    return this.valueSet
  }

  get() {
    return this.v
  }

  set(_k: any, _v: any) {
    this.v = _v
    this.valueSet = true
  }

  clear() {
    this.valueSet = false
  }
}

export class ObjectMemoCache implements MemoCache {
  private v = {}

  has(k: any) {
    return k in this.v
    // return this.v[k]
  }

  get(k: any) {
    return this.v[k]
  }

  set(k: any, v: any) {
    this.v[k] = v
  }

  clear() {
    this.v = {}
  }
}
 */
class MapMemoCache {
    constructor() {
        this.m = new Map();
    }
    has(k) {
        return this.m.has(k);
    }
    get(k) {
        return this.m.get(k);
    }
    set(k, v) {
        this.m.set(k, v);
    }
    clear() {
        this.m.clear();
    }
}
exports.MapMemoCache = MapMemoCache;
