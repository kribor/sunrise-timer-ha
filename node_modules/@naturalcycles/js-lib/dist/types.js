"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._objectKeys = exports._stringMapEntries = exports._stringMapValues = exports._passNothingPredicate = exports._passthroughPredicate = exports._noop = exports._passUndefinedMapper = exports._passthroughMapper = void 0;
const _passthroughMapper = item => item;
exports._passthroughMapper = _passthroughMapper;
const _passUndefinedMapper = () => undefined;
exports._passUndefinedMapper = _passUndefinedMapper;
/**
 * Function that does nothings and returns `undefined`.
 */
const _noop = (..._args) => undefined;
exports._noop = _noop;
const _passthroughPredicate = () => true;
exports._passthroughPredicate = _passthroughPredicate;
const _passNothingPredicate = () => false;
exports._passNothingPredicate = _passNothingPredicate;
/**
 * Needed due to https://github.com/microsoft/TypeScript/issues/13778
 * Only affects typings, no runtime effect.
 */
function _stringMapValues(m) {
    return Object.values(m);
}
exports._stringMapValues = _stringMapValues;
/**
 * Needed due to https://github.com/microsoft/TypeScript/issues/13778
 * Only affects typings, no runtime effect.
 */
function _stringMapEntries(m) {
    return Object.entries(m);
}
exports._stringMapEntries = _stringMapEntries;
/**
 * Like `Object.keys`, but returns keys typed as `keyof T`, not as just `string`.
 * This is how TypeScript should work, actually.
 *
 * @experimental
 */
function _objectKeys(obj) {
    return Object.keys(obj);
}
exports._objectKeys = _objectKeys;
