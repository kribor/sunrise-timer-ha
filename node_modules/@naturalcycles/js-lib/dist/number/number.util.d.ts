export declare function _randomInt(minIncl: number, maxIncl: number): number;
/**
 * Returns random item from an array.
 * Should be used on non-empty arrays! (otherwise will return undefined,
 * which is not reflected in the output type)
 */
export declare function _randomArrayItem<T>(array: T[]): T;
/**
 *  _inRange(-10, 1, 5) // false
 * _inRange(1, 1, 5) // true
 * _inRange(3, 1, 5) // true
 * _inRange(5, 1, 5) // false
 * _inRange(7, 1, 5) // false
 */
export declare function _inRange(x: number, minIncl: number, maxExcl: number): boolean;
export declare function _clamp(x: number, minIncl: number, maxIncl: number): number;
/**
 * This function exists, because in JS you cannot just .sort() numbers,
 * as .sort() function first maps everything to String.
 *
 * @example
 *
 * _sortNumbers([1, 3, 2])
 * // [1, 2, 3]
 */
export declare function _sortNumbers(numbers: number[], mutate?: boolean, descending?: boolean): number[];
/**
 * Same as .toFixed(), but conveniently casts the output to Number.
 *
 * @example
 *
 * _toFixed(1.2345, 2)
 * // 1.23
 *
 * _toFixed(1.10, 2)
 * // 1.1
 */
export declare function _toFixed(n: number, fractionDigits: number): number;
/**
 * Same as .toPrecision(), but conveniently casts the output to Number.
 *
 * @example
 *
 * _toPrecision(1634.56, 1)
 * // 2000
 *
 * _toPrecision(1234.56, 2)
 * // 1600
 */
export declare function _toPrecision(n: number, precision: number): number;
/**
 * @example
 *
 * _round(1634, 1000) // 2000
 * _round(1634, 500) // 1500
 * _round(1634, 100) // 1600
 * _round(1634, 10) // 1630
 * _round(1634, 1) // 1634
 * _round(1634.5678, 0.1) // 1634.6
 * _round(1634.5678, 0.01) // 1634.57
 */
export declare function _round(n: number, precisionUnit: number): number;
