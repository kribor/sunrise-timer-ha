"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.commonLoggerPrefix = exports.commonLoggerPipe = exports.commonLoggerMinLevel = exports.commonLoggerNoop = exports.commonLogLevelNumber = void 0;
const index_1 = require("../index");
exports.commonLogLevelNumber = {
    log: 10,
    warn: 20,
    error: 30,
};
/**
 * SimpleLogger that does nothing (noop).
 *
 * @experimental
 */
exports.commonLoggerNoop = {
    log: index_1._noop,
    warn: index_1._noop,
    error: index_1._noop,
};
/**
 * Creates a "child" logger that is "limited" to the specified CommonLogLevel.
 */
function commonLoggerMinLevel(logger, minLevel, mutate = false) {
    const level = exports.commonLogLevelNumber[minLevel];
    if (mutate) {
        if (level > exports.commonLogLevelNumber['log']) {
            logger.log = index_1._noop;
            if (level > exports.commonLogLevelNumber['warn']) {
                logger.warn = index_1._noop;
                if (level > exports.commonLogLevelNumber['error']) {
                    logger.error = index_1._noop;
                }
            }
        }
        return logger;
    }
    if (level <= exports.commonLogLevelNumber['log']) {
        // All levels are kept
        return logger;
    }
    if (level > exports.commonLogLevelNumber['error']) {
        // "Log nothing" logger
        return exports.commonLoggerNoop;
    }
    return {
        log: index_1._noop,
        warn: level <= exports.commonLogLevelNumber['warn'] ? logger.warn.bind(logger) : index_1._noop,
        error: logger.error.bind(logger), // otherwise it's "log nothing" logger (same as noopLogger)
    };
}
exports.commonLoggerMinLevel = commonLoggerMinLevel;
/**
 * Creates a "proxy" CommonLogger that pipes log messages to all provided sub-loggers.
 */
function commonLoggerPipe(loggers) {
    return {
        log: (...args) => loggers.forEach(logger => logger.log(...args)),
        warn: (...args) => loggers.forEach(logger => logger.warn(...args)),
        error: (...args) => loggers.forEach(logger => logger.error(...args)),
    };
}
exports.commonLoggerPipe = commonLoggerPipe;
/**
 * Creates a "child" CommonLogger with prefix (one or multiple).
 */
function commonLoggerPrefix(logger, ...prefixes) {
    return {
        log: (...args) => logger.log(...prefixes, ...args),
        warn: (...args) => logger.warn(...prefixes, ...args),
        error: (...args) => logger.error(...prefixes, ...args),
    };
}
exports.commonLoggerPrefix = commonLoggerPrefix;
