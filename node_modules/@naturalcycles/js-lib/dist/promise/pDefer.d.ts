/**
 * Similar to Deferred object, which is also a promise itself (instead of deferred.promise).
 */
export interface DeferredPromise<T = void> extends Promise<T> {
    resolve(a?: T): void;
    reject(e?: Error): void;
}
/**
 * Returns DeferredPromise - a Promise that has .resolve() and .reject() methods.
 */
export declare function pDefer<T = void>(): DeferredPromise<T>;
