"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pTimeout = void 0;
/**
 * Decorates a Function with a timeout.
 * Throws an Error if the Function is not resolved in a certain time.
 * If the Function rejects - passes this rejection further.
 */
function pTimeout(fn, opt) {
    // const fname = fn.name || 'function'
    const { timeout, name, onTimeout } = opt;
    return async function (...args) {
        // eslint-disable-next-line no-async-promise-executor
        return await new Promise(async (resolve, reject) => {
            // Prepare the timeout timer
            const timer = setTimeout(() => {
                if (onTimeout) {
                    try {
                        resolve(onTimeout());
                    }
                    catch (err) {
                        reject(err);
                    }
                    return;
                }
                reject(new Error(`"${name || fn.name || 'pTimeout function'}" timed out after ${timeout} ms`));
            }, timeout);
            // Execute the Function
            try {
                resolve(await fn.apply(this, args));
            }
            catch (err) {
                reject(err);
            }
            finally {
                clearTimeout(timer);
            }
        });
    };
}
exports.pTimeout = pTimeout;
