import { Reviver } from '../types';
export declare type JsonStringifyFunction = (obj: any, reviver?: Reviver, space?: number) => string;
export interface StringifyAnyOptions {
    /**
     * @default 10_000
     * Default limit is less than in Node, cause it's likely to be used e.g in Browser alert()
     */
    maxLen?: number;
    /**
     * Pass true to include "stringified" `error.data` in the output.
     *
     * @default false
     */
    includeErrorData?: boolean;
    /**
     * Set to true to print Error.stack instead of just Error.message.
     *
     * @default false
     */
    includeErrorStack?: boolean;
    /**
     * Allows to pass custom "stringify function".
     * E.g in Node.js you can pass `util.inspect` instead.
     *
     * @default JSON.stringify
     */
    stringifyFn?: JsonStringifyFunction;
}
/**
 * Inspired by inspectAny from nodejs-lib, which is based on util.inpect that is not available in the Browser.
 * Potentially can do this (with extra 2Kb gz size): https://github.com/deecewan/browser-util-inspect
 *
 * Transforms ANY to human-readable string (via JSON.stringify pretty).
 * Safe (no error throwing).
 *
 * Correclty prints Errors, AppErrors, ErrorObjects: error.message + \n + stringifyAny(error.data)
 *
 * Enforces max length (default to 1000, pass 0 to skip it).
 *
 * Logs numbers as-is, e.g: `6`.
 * Logs strings as-is (without single quotes around, unlike default util.inspect behavior).
 * Otherwise - just uses JSON.stringify().
 *
 * Returns 'empty_string' if empty string is passed.
 * Returns 'undefined' if undefined is passed (default util.inspect behavior).
 */
export declare function _stringifyAny(obj: any, opt?: StringifyAnyOptions): string;
