"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pTry = exports._try = void 0;
/**
 * Calls a function, returns a Tuple of [error, value].
 * Allows to write shorter code that avoids `try/catch`.
 * Useful e.g. in unit tests.
 *
 * Similar to pTuple, but for sync functions.
 *
 * For convenience, second argument type is non-optional,
 * so you can use it without `!`. But you SHOULD always check `if (err)` first!
 *
 * @example
 *
 * const [err, v] = _try(() => someFunction())
 * if (err) ...do something...
 * v // go ahead and use v
 */
function _try(fn) {
    try {
        return [null, fn()];
    }
    catch (err) {
        return [err, undefined];
    }
}
exports._try = _try;
/**
 * Like _try, but for Promises.
 *
 * Also, intentionally types second return item as non-optional,
 * but you should check for `err` presense first!
 */
async function pTry(promise) {
    try {
        return [null, await promise];
    }
    catch (err) {
        return [err, undefined];
    }
}
exports.pTry = pTry;
