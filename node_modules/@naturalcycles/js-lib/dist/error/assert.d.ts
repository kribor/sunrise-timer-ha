import { ErrorData, HttpErrorData } from '..';
import { AppError } from './app.error';
/**
 * Evaluates the `condition` (casts it to Boolean).
 * Expects it to be truthy, otherwise throws AppError.
 *
 * Should be used NOT for "expected" / user-facing errors, but
 * vice-versa - for completely unexpected and 100% buggy "should never happen" cases.
 *
 * It'll result in http 500 on the server (cause that's the right code for "unexpected" errors).
 * Pass { httpStatusCode: x } at errorData argument to override the http code (will be picked up by backend-lib).
 *
 * API is similar to Node's assert(), except:
 * 1. Throws js-lib's AppError
 * 2. Has a default message, if not provided
 * 3. Sets `userFriendly` flag to true, cause it's always better to have at least SOME clue, rather than fully generic "Oops" error.
 */
export declare function _assert(condition: any, // will be evaluated as Boolean
message?: string, errorData?: Partial<HttpErrorData>): asserts condition;
/**
 * Like _assert(), but prints more helpful error message.
 * API is similar to Node's assert.equals().
 *
 * Does SHALLOW, but strict equality (===), use _assertDeepEquals() for deep equality.
 */
export declare function _assertEquals<T>(actual: any, expected: T, message?: string, errorData?: Partial<HttpErrorData>): asserts actual is T;
/**
 * Like _assert(), but prints more helpful error message.
 * API is similar to Node's assert.deepEquals().
 *
 * Does DEEP equality via _deepEquals()
 */
export declare function _assertDeepEquals<T>(actual: any, expected: T, message?: string, errorData?: Partial<HttpErrorData>): asserts actual is T;
export declare function _assertIsError<ERR extends Error = Error>(err: any, message?: string): asserts err is ERR;
export declare function _assertIsString(v: any, message?: string): asserts v is string;
export declare function _assertIsNumber(v: any, message?: string): asserts v is number;
export declare function _assertTypeOf<T>(v: any, expectedType: string, message?: string): asserts v is T;
export declare class AssertionError extends AppError {
    constructor(message: string, data?: ErrorData);
}
