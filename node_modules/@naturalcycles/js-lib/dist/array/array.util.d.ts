import { RecursiveArray } from '../lodash.types';
import { Mapper, Predicate, StringMap } from '../types';
/**
 * Creates an array of elements split into groups the length of size. If collection can’t be split evenly, the
 * final chunk will be the remaining elements.
 *
 * @param array The array to process.
 * @param size The length of each chunk.
 * @return Returns the new array containing chunks.
 *
 * https://lodash.com/docs#chunk
 *
 * Based on: https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_chunk
 */
export declare function _chunk<T>(array: readonly T[], size?: number): T[][];
/**
 * Polyfill to Array.flat() with depth=1.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
 *
 * @deprecated prefer native Array.flat(), it's supported since iOS 12
 */
export declare function _flatten<T>(arrays: T[][]): T[];
/**
 * Recursively flattens a nested array.
 *
 * @param arr The array to recursively flatten.
 * @return Returns the new flattened array.
 *
 * Based on: https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_flattendeep
 *
 * @deprecated prefer native Array.flat(), it's supported since iOS 12
 */
export declare function _flattenDeep<T>(arr: RecursiveArray<T>): T[];
/**
 * Removes duplicates from given array.
 */
export declare function _uniq<T>(a: readonly T[]): T[];
/**
 * This method is like `_.uniq` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * uniqueness is computed. The iteratee is invoked with one argument: (value).
 *
 * @returns Returns the new duplicate free array.
 * @example
 *
 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // using the `_.property` iteratee shorthand
 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 *
 * Based on: https://stackoverflow.com/a/40808569/4919972
 */
export declare function _uniqBy<T>(arr: readonly T[], mapper: Mapper<T, any>): T[];
/**
 * const a = [
 *  {id: 'id1', a: 'a1'},
 *  {id: 'id2', b: 'b1'},
 * ]
 *
 * _by(a, r => r.id)
 * // => {
 *   id1: {id: 'id1', a: 'a1'},
 *   id2: {id: 'id2', b: 'b1'},
 * }
 *
 * _by(a, r => r.id.toUpperCase())
 * // => {
 *   ID1: {id: 'id1', a: 'a1'},
 *   ID2: {id: 'id2', b: 'b1'},
 * }
 *
 * Returning `undefined` from the Mapper will EXCLUDE the item.
 */
export declare function _by<T>(items: readonly T[], mapper: Mapper<T, any>): StringMap<T>;
/**
 * const a = [1, 2, 3, 4, 5]
 *
 * _groupBy(a, r => r % 2 ? 'even' : 'odd')
 * // => {
 *   odd: [1, 3, 5],
 *   even: [2, 4],
 * }
 *
 * Returning `undefined` from the Mapper will EXCLUDE the item.
 */
export declare function _groupBy<T>(items: readonly T[], mapper: Mapper<T, any>): StringMap<T[]>;
/**
 * _sortBy([{age: 20}, {age: 10}], 'age')
 * // => [{age: 10}, {age: 20}]
 *
 * Same:
 * _sortBy([{age: 20}, {age: 10}], o => o.age)
 */
export declare function _sortBy<T>(items: T[], mapper: Mapper<T, any>, mutate?: boolean, descending?: boolean): T[];
/**
 * Like items.find(), but it tries to find from the END of the array.
 */
export declare function _findLast<T>(items: T[], predicate: Predicate<T>): T | undefined;
export declare function _takeWhile<T>(items: T[], predicate: Predicate<T>): T[];
export declare function _takeRightWhile<T>(items: T[], predicate: Predicate<T>): T[];
export declare function _dropWhile<T>(items: T[], predicate: Predicate<T>): T[];
export declare function _dropRightWhile<T>(items: T[], predicate: Predicate<T>): T[];
export declare function _countBy<T>(items: T[], mapper: Mapper<T, any>): StringMap<number>;
/**
 * @example
 * _intersection([2, 1], [2, 3])
 * // [2]
 */
export declare function _intersection<T>(...arrays: T[][]): T[];
/**
 * @example
 * _difference([2, 1], [2, 3])
 * // [1]
 */
export declare function _difference<T>(source: T[], ...diffs: T[][]): T[];
export declare function _sum(items: number[]): number;
export declare function _sumBy<T>(items: T[], mapper: Mapper<T, number | undefined>): number;
/**
 * Map an array of T to a StringMap<V>,
 * by returning a tuple of [key, value] from a mapper function.
 * Return undefined/null/false/0/void to filter out (not include) a value.
 *
 * @example
 *
 * _mapToObject([1, 2, 3], n => [n, n * 2])
 * // { '1': 2, '2': 4, '3': 6 }
 *
 * _mapToObject([1, 2, 3], n => [n, `id${n}`])
 * // { '1': 'id1, '2': 'id2', '3': 'id3' }
 */
export declare function _mapToObject<T, V>(array: T[], mapper: (item: T) => [key: any, value: V] | undefined | null | false | 0 | void): StringMap<V>;
/**
 * Randomly shuffle an array values.
 * Fisher–Yates algorithm.
 * Based on: https://stackoverflow.com/a/12646864/4919972
 */
export declare function _shuffle<T>(array: T[], mutate?: boolean): T[];
/**
 * Returns last item of the array (or undefined if array is empty).
 */
export declare function _last<T>(array: T[]): T | undefined;
