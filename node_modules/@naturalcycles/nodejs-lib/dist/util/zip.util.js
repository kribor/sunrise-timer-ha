"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gunzipToString = exports.unzipToString = exports.gzipString = exports.zipString = exports.gunzipBuffer = exports.unzipBuffer = exports.gzipBuffer = exports.zipBuffer = void 0;
const util_1 = require("util");
const zlib = require("zlib");
const deflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));
const inflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));
const gzip = (0, util_1.promisify)(zlib.gzip.bind(zlib));
const gunzip = (0, util_1.promisify)(zlib.gunzip.bind(zlib));
// string > zip
/**
 * zipBuffer uses `deflate`.
 * It's 9 bytes shorter than gzip.
 */
async function zipBuffer(buf, options = {}) {
    return await deflate(buf, options);
}
exports.zipBuffer = zipBuffer;
/**
 * gzipBuffer uses `gzip`
 * It's 9 bytes longer than deflate.
 */
async function gzipBuffer(buf, options = {}) {
    return await gzip(buf, options);
}
exports.gzipBuffer = gzipBuffer;
// zip > buffer
async function unzipBuffer(buf, options = {}) {
    return await inflate(buf, options);
}
exports.unzipBuffer = unzipBuffer;
async function gunzipBuffer(buf, options = {}) {
    return await gunzip(buf, options);
}
exports.gunzipBuffer = gunzipBuffer;
// convenience
async function zipString(s, options) {
    return await zipBuffer(Buffer.from(s), options);
}
exports.zipString = zipString;
async function gzipString(s, options) {
    return await gzipBuffer(Buffer.from(s), options);
}
exports.gzipString = gzipString;
// convenience
async function unzipToString(buf, options) {
    return (await unzipBuffer(buf, options)).toString();
}
exports.unzipToString = unzipToString;
async function gunzipToString(buf, options) {
    return (await gunzipBuffer(buf, options)).toString();
}
exports.gunzipToString = gunzipToString;
