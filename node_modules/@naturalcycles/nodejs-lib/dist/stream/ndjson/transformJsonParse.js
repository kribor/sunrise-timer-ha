"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bufferReviver = exports.transformJsonParse = void 0;
const stream_1 = require("stream");
/**
 * Transforms chunks of JSON strings/Buffers (objectMode=false) into parsed objects (readableObjectMode=true).
 *
 * if strict - will throw an error on JSON.parse / stringify error
 *
 * Usage:
 *
 * await _pipeline([
 *   readable,
 *   binarySplit(),
 *   transformJsonParse(),
 *   consumeYourStream...
 * [)
 */
function transformJsonParse(opt = {}) {
    const { strict = true, reviver } = opt;
    return new stream_1.Transform({
        objectMode: false,
        readableObjectMode: true,
        transform(chunk, _encoding, cb) {
            try {
                const data = JSON.parse(chunk, reviver);
                cb(null, data);
            }
            catch (err) {
                // console.error(err)
                if (strict) {
                    cb(err); // emit error
                }
                else {
                    cb(); // emit no error, but no result neither
                }
            }
        },
    });
}
exports.transformJsonParse = transformJsonParse;
// Based on: https://stackoverflow.com/a/34557997/4919972
const bufferReviver = (k, v) => {
    if (v !== null && typeof v === 'object' && v.type === 'Buffer' && Array.isArray(v.data)) {
        return Buffer.from(v.data);
    }
    return v;
};
exports.bufferReviver = bufferReviver;
