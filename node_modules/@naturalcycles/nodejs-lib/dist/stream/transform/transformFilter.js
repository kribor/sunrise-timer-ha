"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFilterSync = exports.transformFilter = void 0;
const stream_1 = require("stream");
/**
 * Note, that currently it's NOT concurrent! (concurrency = 1)
 * So, it's recommended to use transformMap instead, that is both concurrent and has
 * filtering feature by default.
 */
function transformFilter(predicate, opt = {}) {
    let index = 0;
    return new stream_1.Transform({
        objectMode: true,
        ...opt,
        async transform(chunk, _encoding, cb) {
            try {
                if (await predicate(chunk, index++)) {
                    cb(null, chunk); // pass through
                }
                else {
                    cb(); // signal that we've finished processing, but emit no output here
                }
            }
            catch (err) {
                cb(err);
            }
        },
    });
}
exports.transformFilter = transformFilter;
/**
 * Sync version of `transformFilter`
 */
function transformFilterSync(predicate, opt = {}) {
    let index = 0;
    return new stream_1.Transform({
        objectMode: true,
        ...opt,
        async transform(chunk, _encoding, cb) {
            try {
                if (predicate(chunk, index++)) {
                    cb(null, chunk); // pass through
                }
                else {
                    cb(); // signal that we've finished processing, but emit no output here
                }
            }
            catch (err) {
                cb(err);
            }
        },
    });
}
exports.transformFilterSync = transformFilterSync;
